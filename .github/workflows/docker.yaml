name: Docker
on:
  workflow_call:
  workflow_dispatch:
jobs:
  set_matrix:
    name: Set Matrix
    runs-on: ubuntu-latest
    outputs:
      docker_bake_target: ${{ steps.set-matrix.outputs.docker_bake_target }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          targets=$(docker buildx bake --print -f ./docker/docker-bake.hcl | jq -rcM ".group.default.targets")
          echo "docker_bake_target=$targets" >> "$GITHUB_OUTPUT"
  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: set_matrix
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJSON(needs.set_matrix.outputs.docker_bake_target) }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate build meta
        run: |
          # tag > commit
          echo "build_version=$(git describe --tags --exact-match 2> /dev/null || git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "image_name=$(echo "${{ matrix.target }}" | sed -r 's/[-]+/\//g')" >> "$GITHUB_ENV"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          bake-target: docker-metadata-action
          images: |
            ghcr.io/pgxman/builder/${{ env.image_name }}
      - name: Docker build and push
        uses: docker/bake-action@v4
        with:
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          files: |
            docker/docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: |
            ${{ matrix.target }}
          set: |
            *.platform=linux/amd64,linux/arm64
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            pgxman.args.BUILD_VERSION=${{ env.build_version }}
