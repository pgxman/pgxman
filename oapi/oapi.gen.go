// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AptRepositoryType.
const (
	Deb    AptRepositoryType = "deb"
	DebSrc AptRepositoryType = "deb_src"
)

// Defines values for Architecture.
const (
	Amd64 Architecture = "amd64"
	Arm64 Architecture = "arm64"
)

// Defines values for PgVersion.
const (
	Postgres13 PgVersion = "13"
	Postgres14 PgVersion = "14"
	Postgres15 PgVersion = "15"
	Postgres16 PgVersion = "16"
)

// Defines values for PlatformOs.
const (
	DebianBookworm PlatformOs = "debian_bookworm"
	UbuntuJammy    PlatformOs = "ubuntu_jammy"
)

// Defines values for SignedKeyFormat.
const (
	Asc SignedKeyFormat = "asc"
	Gpg SignedKeyFormat = "gpg"
)

// AptRepositories defines model for AptRepositories.
type AptRepositories = []AptRepository

// AptRepository defines model for AptRepository.
type AptRepository struct {
	Components []string            `json:"components" validate:"required,dive,required"`
	Id         string              `json:"id" validate:"required"`
	SignedKey  SignedKey           `json:"signed_key"`
	Suites     []string            `json:"suites" validate:"required,dive,required"`
	Types      []AptRepositoryType `json:"types" validate:"required,dive,oneof=deb deb_src"`
	Uris       []string            `json:"uris" validate:"required,dive,url"`
}

// AptRepositoryType defines model for AptRepositoryType.
type AptRepositoryType string

// Architecture defines model for Architecture.
type Architecture string

// Architectures defines model for Architectures.
type Architectures = []Architecture

// BaseExtension defines model for BaseExtension.
type BaseExtension struct {
	CreatedAt Timestamp `json:"created_at"`
	Id        Uuid      `json:"id"`

	// Keywords keywords
	Keywords  Keywords      `json:"keywords,omitempty" validate:"gte=0,dive,required"`
	Name      ExtensionName `json:"name" validate:"required,urlsafe"`
	UpdatedAt Timestamp     `json:"updated_at"`
}

// CommonExtension defines model for CommonExtension.
type CommonExtension struct {
	Packages Packages `json:"packages" validate:"required,dive,keys,required,oneof=13 14 15 16,endkeys"`
}

// Dependencies defines model for Dependencies.
type Dependencies = []Dependency

// Dependency defines model for Dependency.
type Dependency = string

// Description defines model for Description.
type Description = string

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Extension defines model for Extension.
type Extension struct {
	CreatedAt   Timestamp   `json:"created_at"`
	Description Description `json:"description,omitempty"`
	Homepage    Homepage    `json:"homepage,omitempty"`
	Id          Uuid        `json:"id"`

	// Keywords keywords
	Keywords Keywords `json:"keywords,omitempty" validate:"gte=0,dive,required"`

	// License License under which the extension is distributed. The license must be a valid SPDX license identifier.
	License     License       `json:"license,omitempty"`
	Maintainers Maintainers   `json:"maintainers,omitempty" validate:"gt=0,dive,required"`
	Name        ExtensionName `json:"name" validate:"required,urlsafe"`
	Packages    Packages      `json:"packages" validate:"required,dive,keys,required,oneof=13 14 15 16,endkeys"`
	Platforms   Platforms     `json:"platforms,omitempty" validate:"required,min=1,dive"`
	Readme      Readme        `json:"readme,omitempty"`
	Repository  *Repository   `json:"repository,omitempty" validate:"required,url"`
	Source      *Source       `json:"source,omitempty" validate:"required,url,extension_source"`
	UpdatedAt   Timestamp     `json:"updated_at"`
	Version     *VersionCode  `json:"version,omitempty" validate:"semver"`
}

// ExtensionName defines model for ExtensionName.
type ExtensionName = string

// Homepage defines model for Homepage.
type Homepage = string

// Keyword defines model for Keyword.
type Keyword = string

// Keywords keywords
type Keywords = []Keyword

// License License under which the extension is distributed. The license must be a valid SPDX license identifier.
type License = string

// Maintainer defines model for Maintainer.
type Maintainer struct {
	Email UserEmail `json:"email" validate:"required,email"`
	Name  UserName  `json:"name" validate:"required"`
}

// Maintainers defines model for Maintainers.
type Maintainers = []Maintainer

// Package defines model for Package.
type Package struct {
	Description Description `json:"description,omitempty"`
	Homepage    Homepage    `json:"homepage,omitempty"`

	// License License under which the extension is distributed. The license must be a valid SPDX license identifier.
	License     License     `json:"license,omitempty"`
	Maintainers Maintainers `json:"maintainers" validate:"gt=0,dive,required"`
	Platforms   Platforms   `json:"platforms" validate:"required,min=1,dive"`
	Readme      Readme      `json:"readme,omitempty"`
	Repository  Repository  `json:"repository" validate:"required,url"`
	Source      Source      `json:"source" validate:"required,url,extension_source"`
	Version     VersionCode `json:"version" validate:"semver"`
}

// Packages defines model for Packages.
type Packages map[string]Package

// PgVersion defines model for PgVersion.
type PgVersion string

// PgVersions defines model for PgVersions.
type PgVersions = []PgVersion

// Platform defines model for Platform.
type Platform struct {
	AptRepositories   AptRepositories `json:"apt_repositories,omitempty" validate:"gte=0,dive"`
	Architectures     Architectures   `json:"architectures" validate:"required,dive,oneof=amd64 arm64"`
	BuildDependencies Dependencies    `json:"build_dependencies"`
	Os                PlatformOs      `json:"os" validate:"required,oneof=debian_bookworm ubuntu_jammy"`
	PgVersions        PgVersions      `json:"pg_versions" validate:"required,dive,oneof=13 14 15 16"`
	RunDependencies   Dependencies    `json:"run_dependencies"`
}

// PlatformOs defines model for Platform.Os.
type PlatformOs string

// Platforms defines model for Platforms.
type Platforms = []Platform

// Provider defines model for Provider.
type Provider struct {
	Description *string      `json:"description,omitempty"`
	Extensions  *[]Extension `json:"extensions,omitempty"`
	Homepage    *string      `json:"homepage,omitempty"`
	Id          *string      `json:"id,omitempty"`
	Logo        *string      `json:"logo,omitempty"`
	Name        *string      `json:"name,omitempty"`
}

// Providers defines model for Providers.
type Providers struct {
	// Providers a list of providers
	Providers *[]Provider `json:"providers,omitempty"`
}

// PublishExtension defines model for PublishExtension.
type PublishExtension struct {
	// Keywords keywords
	Keywords Keywords `json:"keywords,omitempty" validate:"gte=0,dive,required"`

	// MakeLatest Whether to make this version the latest version of the extension
	MakeLatest bool          `json:"make_latest,omitempty"`
	Name       ExtensionName `json:"name" validate:"required,urlsafe"`
	Packages   Packages      `json:"packages" validate:"required,dive,keys,required,oneof=13 14 15 16,endkeys"`
}

// Readme defines model for Readme.
type Readme = string

// Repository defines model for Repository.
type Repository = string

// SignedKey defines model for SignedKey.
type SignedKey struct {
	Format SignedKeyFormat `json:"format" validate:"required,oneof=gpg asc"`
	Url    string          `json:"url" validate:"required,url"`
}

// SignedKeyFormat defines model for SignedKey.Format.
type SignedKeyFormat string

// SimpleExtension defines model for SimpleExtension.
type SimpleExtension struct {
	CreatedAt   Timestamp     `json:"created_at"`
	Description Description   `json:"description"`
	Id          Uuid          `json:"id"`
	Name        ExtensionName `json:"name" validate:"required,urlsafe"`
	UpdatedAt   Timestamp     `json:"updated_at"`
	Version     VersionCode   `json:"version" validate:"semver"`
}

// SimpleExtensions defines model for SimpleExtensions.
type SimpleExtensions struct {
	// Extensions a list of extensions
	Extensions []SimpleExtension `json:"extensions,omitempty"`
}

// Source defines model for Source.
type Source = string

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// User defines model for User.
type User struct {
	CreatedAt Timestamp    `json:"created_at"`
	Email     UserEmail    `json:"email" validate:"required,email"`
	Id        Uuid         `json:"id"`
	Name      UserName     `json:"name" validate:"required"`
	Picture   *UserPicture `json:"picture,omitempty"`
	UpdatedAt Timestamp    `json:"updated_at"`
}

// UserEmail defines model for UserEmail.
type UserEmail = openapi_types.Email

// UserName defines model for UserName.
type UserName = string

// UserPicture defines model for UserPicture.
type UserPicture = string

// VersionCode defines model for VersionCode.
type VersionCode = string

// Uuid defines model for uuid.
type Uuid = uuid.UUID

// ListExtensionsParams defines parameters for ListExtensions.
type ListExtensionsParams struct {
	// Term name and description to filter by
	Term *string `form:"term,omitempty" json:"term,omitempty"`

	// Featured featured extensions
	Featured *bool `form:"featured,omitempty" json:"featured,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PublishExtensionJSONRequestBody defines body for PublishExtension for application/json ContentType.
type PublishExtensionJSONRequestBody = PublishExtension

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListExtensions request
	ListExtensions(ctx context.Context, params *ListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishExtensionWithBody request with any body
	PublishExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishExtension(ctx context.Context, body PublishExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindExtension request
	FindExtension(ctx context.Context, slug ExtensionName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindVersion request
	FindVersion(ctx context.Context, slug ExtensionName, version VersionCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProviders request
	ListProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProviderExtensions request
	ListProviderExtensions(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListExtensions(ctx context.Context, params *ListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExtensionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishExtensionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishExtension(ctx context.Context, body PublishExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishExtensionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindExtension(ctx context.Context, slug ExtensionName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindExtensionRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindVersion(ctx context.Context, slug ExtensionName, version VersionCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindVersionRequest(c.Server, slug, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProviderExtensions(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProviderExtensionsRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListExtensionsRequest generates requests for ListExtensions
func NewListExtensionsRequest(server string, params *ListExtensionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Term != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term", runtime.ParamLocationQuery, *params.Term); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Featured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featured", runtime.ParamLocationQuery, *params.Featured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishExtensionRequest calls the generic PublishExtension builder with application/json body
func NewPublishExtensionRequest(server string, body PublishExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishExtensionRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishExtensionRequestWithBody generates requests for PublishExtension with any type of body
func NewPublishExtensionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindExtensionRequest generates requests for FindExtension
func NewFindExtensionRequest(server string, slug ExtensionName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindVersionRequest generates requests for FindVersion
func NewFindVersionRequest(server string, slug ExtensionName, version VersionCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProvidersRequest generates requests for ListProviders
func NewListProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProviderExtensionsRequest generates requests for ListProviderExtensions
func NewListProviderExtensionsRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s/extensions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListExtensionsWithResponse request
	ListExtensionsWithResponse(ctx context.Context, params *ListExtensionsParams, reqEditors ...RequestEditorFn) (*ListExtensionsResponse, error)

	// PublishExtensionWithBodyWithResponse request with any body
	PublishExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishExtensionResponse, error)

	PublishExtensionWithResponse(ctx context.Context, body PublishExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishExtensionResponse, error)

	// FindExtensionWithResponse request
	FindExtensionWithResponse(ctx context.Context, slug ExtensionName, reqEditors ...RequestEditorFn) (*FindExtensionResponse, error)

	// FindVersionWithResponse request
	FindVersionWithResponse(ctx context.Context, slug ExtensionName, version VersionCode, reqEditors ...RequestEditorFn) (*FindVersionResponse, error)

	// ListProvidersWithResponse request
	ListProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error)

	// ListProviderExtensionsWithResponse request
	ListProviderExtensionsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*ListProviderExtensionsResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)
}

type ListExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleExtensions
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Extension
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PublishExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Extension
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r FindExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Extension
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r FindVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Providers
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProviderExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Providers
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListProviderExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProviderExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListExtensionsWithResponse request returning *ListExtensionsResponse
func (c *ClientWithResponses) ListExtensionsWithResponse(ctx context.Context, params *ListExtensionsParams, reqEditors ...RequestEditorFn) (*ListExtensionsResponse, error) {
	rsp, err := c.ListExtensions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExtensionsResponse(rsp)
}

// PublishExtensionWithBodyWithResponse request with arbitrary body returning *PublishExtensionResponse
func (c *ClientWithResponses) PublishExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishExtensionResponse, error) {
	rsp, err := c.PublishExtensionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishExtensionResponse(rsp)
}

func (c *ClientWithResponses) PublishExtensionWithResponse(ctx context.Context, body PublishExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishExtensionResponse, error) {
	rsp, err := c.PublishExtension(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishExtensionResponse(rsp)
}

// FindExtensionWithResponse request returning *FindExtensionResponse
func (c *ClientWithResponses) FindExtensionWithResponse(ctx context.Context, slug ExtensionName, reqEditors ...RequestEditorFn) (*FindExtensionResponse, error) {
	rsp, err := c.FindExtension(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindExtensionResponse(rsp)
}

// FindVersionWithResponse request returning *FindVersionResponse
func (c *ClientWithResponses) FindVersionWithResponse(ctx context.Context, slug ExtensionName, version VersionCode, reqEditors ...RequestEditorFn) (*FindVersionResponse, error) {
	rsp, err := c.FindVersion(ctx, slug, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindVersionResponse(rsp)
}

// ListProvidersWithResponse request returning *ListProvidersResponse
func (c *ClientWithResponses) ListProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error) {
	rsp, err := c.ListProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProvidersResponse(rsp)
}

// ListProviderExtensionsWithResponse request returning *ListProviderExtensionsResponse
func (c *ClientWithResponses) ListProviderExtensionsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*ListProviderExtensionsResponse, error) {
	rsp, err := c.ListProviderExtensions(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProviderExtensionsResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// ParseListExtensionsResponse parses an HTTP response from a ListExtensionsWithResponse call
func ParseListExtensionsResponse(rsp *http.Response) (*ListExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleExtensions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePublishExtensionResponse parses an HTTP response from a PublishExtensionWithResponse call
func ParsePublishExtensionResponse(rsp *http.Response) (*PublishExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Extension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFindExtensionResponse parses an HTTP response from a FindExtensionWithResponse call
func ParseFindExtensionResponse(rsp *http.Response) (*FindExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Extension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFindVersionResponse parses an HTTP response from a FindVersionWithResponse call
func ParseFindVersionResponse(rsp *http.Response) (*FindVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Extension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListProvidersResponse parses an HTTP response from a ListProvidersWithResponse call
func ParseListProvidersResponse(rsp *http.Response) (*ListProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Providers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListProviderExtensionsResponse parses an HTTP response from a ListProviderExtensionsWithResponse call
func ParseListProviderExtensionsResponse(rsp *http.Response) (*ListProviderExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProviderExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Providers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
